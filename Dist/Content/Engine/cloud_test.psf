#include <Psybrus.psh>

#include <UniformCloudTest.psh>

//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float4, InPosition_, POSITION );
	DECLARE_IN( float4, InNormal_, NORMAL );
	DECLARE_IN( float4, InTexCoord_, TEXCOORD0 );
	DECLARE_IN( float4, InColour_, COLOR0 );
VS_IN_END

VS_OUT_BEGIN
	DECLARE_OUT( float3, VsRayPos, TEXCOORD0 );
	DECLARE_OUT( float3, VsRayDir, TEXCOORD1 );
VS_OUT_END

VS_MAIN( vertexMain )
{
	VS_ENTER;
	OUT_POSITION = IN( InPosition_ );

	float2 q = IN( InTexCoord_ ).xy;
	float2 p = -1.0+2.0*q;
		 
	// ray near + far
	float4 rn = mul( InverseProjectionTransform_, float4( p, 0.0, 1.0 ) );
	float4 rf = mul( InverseProjectionTransform_, float4( p, 1.0, 1.0 ) );

	rn *= 0.0;
	rf *= 10000.0;

	rn = mul( InverseViewTransform_, float4( rn.xyz, 1.0 ) );
	rf = mul( InverseViewTransform_, float4( rf.xyz, 1.0 ) );

	OUT( VsRayPos ) = rn.xyz;
	OUT( VsRayDir ) = normalize( rf.xyz - rn.xyz );
	VS_EXIT;
}

#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float3, VsRayPos, TEXCOORD0 );
	DECLARE_IN( float3, VsRayDir, TEXCOORD1 );
PS_IN_END
#include <PsybrusOutput.psh>
//////////////////////////////////////////////////////////////////////////
// sdSphere
float sdSphere( float3 Position, float Radius )
{
	return length( Position ) - Radius;
}

//////////////////////////////////////////////////////////////////////////
// sdBox
float sdBox( float3 Position, float3 Bounds )
{
  float3 Distance = abs( Position ) - Bounds;
  return min( max( Distance.x, max( Distance.y, Distance.z ) ), 0.0 ) + length( max( Distance, 0.0 ) );
}

//////////////////////////////////////////////////////////////////////////
// map
float map( float3 Position )
{
	return sdBox( Position, CloudScale_.xyz );
}

//////////////////////////////////////////////////////////////////////////
// rayMarch
float2 rayMarch( float3 RayPos, float3 RayDir )
{
	float Precision = 0.001;
	float Tmin = 1.0;
	float Tmax = 1000.0;
	int MaxSteps = 128;
	float T = Tmin;
	float Dist = -1.0;
	for( int Idx = 0; Idx < MaxSteps; ++Idx )
	{
		float3 SamplePosition = RayPos + RayDir * T;
		Dist = map( SamplePosition );
		if( Dist < Precision || T > Tmax )
		{
			break;
		}
		T += Dist;
	}
	if( T > Tmax )
	{
		Dist = -1.0;
	}
	return float2( T, Dist );
}

//////////////////////////////////////////////////////////////////////////
// sampleCloud
#if PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
PSY_SAMPLER_3D( CloudTex );
#endif

float sampleCloud( float3 Position )
{
	float3 SamplePosition = ( Position.xzy / ( CloudScale_.xyz * 2.0 ) ) + 0.5;
#if PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
	float4 CloudSample = PSY_SAMPLE_3D( CloudTex, SamplePosition + float3( CloudTimer_.w, 0.0, 0.0 ) );
#else
	float4 CloudSample = float4( 0.0, 0.0, 0.0, 0.0 );
#endif
	return max( 0.0, CloudSample.x );
}

//////////////////////////////////////////////////////////////////////////
// calcNormal
float3 calcNormal( float3 Position )
{
	float3 Offset = float3( 0.01, 0.0, 0.0 );
	float3 Normal = float3(
		sampleCloud( Position - Offset.xyz ) - sampleCloud( Position + Offset.xyz ),
		sampleCloud( Position - Offset.zxy ) - sampleCloud( Position + Offset.zxy ),
		sampleCloud( Position - Offset.yzx ) - sampleCloud( Position + Offset.yzx ) );
	return normalize( Normal );
}

//////////////////////////////////////////////////////////////////////////
// calcOcclusion
float calcOcclusion( float3 Position )
{
	float3 Offset = float3( 0.01, 0.0, 0.0 );
	float3 Offsets[ 6 ];
	Offsets[ 0 ] = -Offset.xyz;
	Offsets[ 1 ] = Offset.xyz;
	Offsets[ 2 ] = -Offset.zxy;
	Offsets[ 3 ] = Offset.zxy;
	Offsets[ 4 ] = -Offset.yzx;
	Offsets[ 5 ] = Offset.yzx;

	float Occlusion = 0.0;
	for( int Idx = 0; Idx < 6; ++Idx )
	{
		if( sampleCloud( Position + Offsets[ Idx ] ) > CloudThreshold_ )
		{
			Occlusion += 1.0 / 6.0;
		}
	}

	return Occlusion;
}

//////////////////////////////////////////////////////////////////////////
// render
float4 render( float3 RayPos, float3 RayDir )
{
	float4 Colour = float4( 0.0, 0.0, 0.0, 0.0 );

	// Find intersecting point.
	float2 RayRes = rayMarch( RayPos, RayDir );
	if( RayRes.y >= -0.5 )
	{
		float3 Position = RayPos + RayDir * RayRes.x;

		float4 Colour = float4( 1.0, 1.0, 1.0, 0.0 );
		float Density = 0.1;

		// Step fast until we hit a cloud, then refine by halving the step size.
		float Precision = 0.01;
		float StepSize = 0.1;
		float Tmin = 1.0;
		float Tmax = 1000.0;
		int MaxSteps = 1024;
		int RefinementSteps = 8;
		int NoofRefinements = 0;
		float T = Tmin;
		float Dist = -1.0;
		for( int Idx = 0; Idx < MaxSteps; ++Idx )
		{
			float3 SamplePosition = Position + RayDir * T;
			Dist = map( SamplePosition );

			if( Dist > Precision || T > Tmax )
			{
				break;
			}
#if 0
			if( Dist < -0.5 )
			{
				Colour.xyz = float3( 1.0, 1.0, 1.0 ) * ( ( 0.5 * sampleCloud( SamplePosition ) + 0.5 ) / CloudThreshold_ );
				Colour.w = 1.0;
				break;
			}
			T += StepSize;
#else
			if( sampleCloud( SamplePosition ) > CloudThreshold_ )
			{
				if( NoofRefinements < RefinementSteps )
				{
					T -= StepSize;
					StepSize *= 0.5;
					NoofRefinements++;
				}
				else
				{
					Colour.xyz = calcNormal( SamplePosition ) + 1.0 * 0.5;// * ( 1.0 - calcOcclusion( SamplePosition ) );
					Colour.w = 1.0;

					// TODO: Perform more work for this pixel for better quality cloud.

					break;
				}
			}
			else
			{
				T += StepSize;
			}
#endif
		}


		//
		return Colour;
	}
	return float4( 0.0, 0.0, 0.0, 0.0 );
}

//////////////////////////////////////////////////////////////////////////
// pixelMain
PS_MAIN( pixelMain )
{
	PS_ENTER;
	outputFrag[0] = render( IN( VsRayPos ), normalize( IN( VsRayDir ) ) );
	PS_EXIT;
}

#endif // PIXEL_SHADER
