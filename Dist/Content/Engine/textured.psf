#include <Psybrus.psh>
#include <PsybrusLighting.psh>

//////////////////////////////////////////////////////////////////////////
// If rendering particles + in deferred, enable soft clipping.
#if defined( PERM_MESH_PARTICLE_3D ) && defined ( PERM_RENDER_DEFERRED )
//#define SOFT_CLIPPING
#endif

//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float4, InPosition_, POSITION );
	DECLARE_IN( float4, InNormal_, NORMAL );
	DECLARE_IN( float4, InTexCoord_, TEXCOORD0 );
	DECLARE_IN( float4, InColour_, COLOR0 );
#if defined( PERM_MESH_SKINNED_3D )
	DECLARE_IN( float4, InBlendWeights_, BLENDWEIGHTS );
	DECLARE_IN( BLENDINDICES_TYPE, InBlendIndices_, BLENDINDICES );
#elif defined( PERM_MESH_PARTICLE_3D )
	DECLARE_IN( float4, InTangent_, TANGENT );
#endif
VS_IN_END

VS_OUT_BEGIN
	DECLARE_OUT( float4, VsColour0, COLOR0 );
	DECLARE_OUT( float3, VsNormal, NORMAL );
	DECLARE_OUT( float2, VsTexCoord0, TEXCOORD0 );
	DECLARE_OUT( float3, VsWorldPosition, TEXCOORD1 );
	DECLARE_OUT( float3, VsMaterial0, TEXCOORD2 );
	DECLARE_OUT( float3, VsMaterial1, TEXCOORD3 );
VS_OUT_END

VS_MAIN( vertexMain )
{
	VS_ENTER;
	float4 WorldPosition;
	PSY_MAKE_WORLD_SPACE_VERTEX( WorldPosition, IN( InPosition_ ) );
	PSY_MAKE_CLIP_SPACE_VERTEX( OUT_POSITION, WorldPosition );
	OUT( VsWorldPosition ) = WorldPosition.xyz;
	OUT( VsColour0 ) = IN( InColour_ );

	float4 Normal;
	PSY_MAKE_WORLD_SPACE_NORMAL( Normal, IN( InNormal_ ) );
	OUT( VsNormal ) = Normal.xyz;

	OUT( VsTexCoord0 ) = IN( InTexCoord_ ).xy;

#if defined( PERM_MESH_INSTANCED_3D ) && PSY_INPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
	float3 Material0 = MaterialInstances_[ GInstanceID ].MaterialBaseColour_.xyz;
	float3 Material1;
	Material1.x = MaterialInstances_[ GInstanceID ].MaterialMetallic_;
	Material1.y = MaterialInstances_[ GInstanceID ].MaterialSpecular_;
	Material1.z = MaterialInstances_[ GInstanceID ].MaterialRoughness_;
	OUT( VsMaterial0 ) = Material0;
	OUT( VsMaterial1 ) = Material1;
#else
	float3 Material0 = MaterialBaseColour_.xyz;
	float3 Material1;
	Material1.x = MaterialMetallic_;
	Material1.y = MaterialSpecular_;
	Material1.z = MaterialRoughness_;
	OUT( VsMaterial0 ) = Material0;
	OUT( VsMaterial1 ) = Material1;
#endif

	VS_EXIT;
}

#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float4, VsColour0, COLOR0 );
	DECLARE_IN( float3, VsNormal, NORMAL );
	DECLARE_IN( float2, VsTexCoord0, TEXCOORD0 );
	DECLARE_IN( float3, VsWorldPosition, TEXCOORD1 );
	DECLARE_IN( float3, VsMaterial0, TEXCOORD2 );
	DECLARE_IN( float3, VsMaterial1, TEXCOORD3 );
PS_IN_END
#include <PsybrusOutput.psh>

//////////////////////////////////////////////////////////////////////////
// Samplers
PSY_SAMPLER_2D( DiffuseTex );
PSY_SAMPLER_2D( SpecularTex );
PSY_SAMPLER_2D( OpacityTex );
PSY_SAMPLER_CUBE( ReflectionTex );

#if defined( SOFT_CLIPPING )
PSY_SAMPLER_2D( DepthTex );
#endif

//////////////////////////////////////////////////////////////////////////
// pixelAll
void pixelAll( FRAMEBUFFER_INPUT )
{
	float4 Diffuse = PSY_SAMPLE_2D( DiffuseTex, IN( VsTexCoord0 ).xy );
	float4 Specular = float4( 1.0, 1.0, 1.0, 1.0 );
	float3 Normal = normalize( IN( VsNormal ) );

	Material InMaterial;
	InMaterial.Colour_ = IN( VsMaterial0 ).xyz;
	InMaterial.Metallic_ = IN( VsMaterial1 ).x;
	InMaterial.Specular_ = IN( VsMaterial1 ).y;
	InMaterial.Roughness_ = IN( VsMaterial1 ).z;

#if defined( SOFT_CLIPPING )
	float DstDepth  = linearDepth( PSY_SAMPLE_2D( DepthTex, float2( gl_FragCoord.x, gl_FragCoord.y ) * ViewSize_.zw ).x, NearFar_.x, NearFar_.y );
	float SrcDepth = linearDepth( gl_FragCoord.z, NearFar_.x, NearFar_.y );
	float DiffDepth = clamp( ( DstDepth - SrcDepth ) / 1.0, 0.0, 1.0 );
	Diffuse.w *= DiffDepth;

#  if defined ( PERM_RENDER_DEFERRED )
	// If we're doing soft clipping for deferred it means we're no longer rendering to the gbuffer, so we need to go linear.
	Diffuse = gammaToLinear( Diffuse );
#  endif
#endif

#if defined( PERM_RENDER_FORWARD ) && defined( PERM_LIGHTING_DIFFUSE )
	Diffuse = gammaToLinear( Diffuse ) * IN( VsColour0 );
	float3 EyePosition = getViewPosition();
	float3 TotalSurface = float3( 0.0, 0.0, 0.0 );

	float3 ReflectionColour = PSY_SAMPLE_CUBE_LOD( ReflectionTex, reflect( normalize( IN( VsWorldPosition ).xyz - EyePosition ), Normal.xyz ), MaterialRoughness_ ).xyz;

	for( int LightIdx = 0; LightIdx < 4; ++LightIdx )
	{
		Light InLight;
		InLight.Position_ = LightPosition_[ LightIdx ].xyz;
		InLight.Colour_ = LightDiffuseColour_[ LightIdx ].xyz;
		InLight.AttenuationCLQ_ = LightAttn_[ LightIdx ].xyz;
		TotalSurface += BRDF_Default( InLight, InMaterial, EyePosition.xyz, IN( VsWorldPosition ).xyz, Normal.xyz, ReflectionColour.xyz );
	}
	TotalSurface = min( float3( 1.0, 1.0, 1.0 ), TotalSurface );
	TotalSurface = linearToGamma( TotalSurface );
	writeFrag( FRAMEBUFFER_INTERNAL, float4( TotalSurface, Diffuse.w ), Normal.xyz, float3( 0.0, 0.0, 0.0 ) );
#else
	writeFrag( FRAMEBUFFER_INTERNAL, Diffuse * IN( VsColour0 ), IN( VsNormal ).xyz, Specular.xyz );
#endif
}

//////////////////////////////////////////////////////////////////////////
// pixelMain
PS_MAIN( pixelMain )
{
	PS_ENTER;
	pixelAll( FRAMEBUFFER_OUTPUT );
	PS_EXIT;
}

//////////////////////////////////////////////////////////////////////////
// pixelMainMask
PS_MAIN( pixelMainMask )
{
	PS_ENTER;
	float4 Opacity = PSY_SAMPLE_2D( OpacityTex, IN( VsTexCoord0 ).xy );
	if( Opacity.x < 0.5 )
	{
		discard;
	}

	pixelAll( FRAMEBUFFER_OUTPUT );
	PS_EXIT;
}


#endif
