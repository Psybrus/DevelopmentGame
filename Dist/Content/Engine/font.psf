#include <Psybrus.psh>

#include <UniformFont.psh>

//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float4, InPosition_, POSITION );
	DECLARE_IN( float4, InNormal_, NORMAL );
	DECLARE_IN( float4, InTexCoord_, TEXCOORD0 );
	DECLARE_IN( float4, InColour_, COLOR0 );
#if defined( PERM_MESH_SKINNED_3D )
	DECLARE_IN( float4, InBlendWeights_, BLENDWEIGHTS );
	DECLARE_IN( BLENDINDICES_TYPE, InBlendIndices_, BLENDINDICES );
#elif defined( PERM_MESH_PARTICLE_3D )
	DECLARE_IN( float4, InTangent_, TANGENT );
#endif
VS_IN_END


VS_OUT_BEGIN
	DECLARE_OUT( float4, VsColour0, COLOR0 );
	DECLARE_OUT( float4, VsTexCoord0, TEXCOORD0 );
VS_OUT_END

VS_MAIN( vertexMain )
{
	VS_ENTER;
 	float4 WorldPosition;
	PSY_MAKE_WORLD_SPACE_VERTEX( WorldPosition, IN( InPosition_ ) );
	PSY_MAKE_CLIP_SPACE_VERTEX( OUT_POSITION, WorldPosition );
	OUT( VsTexCoord0 ) = IN( InTexCoord_ );
	OUT( VsColour0 ) = IN( InColour_ );
	VS_EXIT;
}

#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float4, VsColour0, COLOR0 );
	DECLARE_IN( float4, VsTexCoord0, TEXCOORD0 );
PS_IN_END
#include <PsybrusOutput.psh>
//////////////////////////////////////////////////////////////////////////
// pixelMain
PSY_SAMPLER_2D( DiffuseTex );

PS_MAIN( pixelMain )
{
	PS_ENTER;
	float4 TextColour = PSY_SAMPLE_2D( DiffuseTex, IN( VsTexCoord0 ).xy );
	float TextFactor = smoothstep( TextSettings_.x, TextSettings_.y, TextColour.a );
	outputFrag[0] = float4( TextColour_.xyz, TextFactor * TextColour_.w ) * IN( VsColour0 );
	PS_EXIT;
}

#endif
