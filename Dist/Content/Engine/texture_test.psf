#include <Psybrus.psh>

#include <UniformTextureTest.psh>

//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float4, InPosition_, POSITION );
	DECLARE_IN( float4, InNormal_, NORMAL );
	DECLARE_IN( float4, InTexCoord_, TEXCOORD0 );
	DECLARE_IN( float4, InColour_, COLOR0 );
#if defined( PERM_MESH_SKINNED_3D )
	DECLARE_IN( float4, InBlendWeights_, BLENDWEIGHTS );
	DECLARE_IN( BLENDINDICES_TYPE, InBlendIndices_, BLENDINDICES );
#elif defined( PERM_MESH_PARTICLE_3D )
	DECLARE_IN( float4, InTangent_, TANGENT );
#endif
VS_IN_END

VS_OUT_BEGIN
	DECLARE_OUT( float4, VsColour0, COLOR0 );
	DECLARE_OUT( float4, VsNormal, NORMAL );
	DECLARE_OUT( float4, VsTexCoord0, TEXCOORD0 );
VS_OUT_END

VS_MAIN( vertexMain )
{
	VS_ENTER;
 	float4 WorldPosition;
	PSY_MAKE_WORLD_SPACE_VERTEX( WorldPosition, IN( InPosition_ ) );
	PSY_MAKE_CLIP_SPACE_VERTEX( OUT_POSITION, WorldPosition );
	PSY_MAKE_WORLD_SPACE_NORMAL( OUT( VsNormal ), IN( InNormal_ ) );
	OUT( VsColour0 ) = IN( InColour_ );

#if TEXTURE_TEST_DIMENSION == 6 && PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
	OUT( VsTexCoord0 ) = OUT( VsNormal );
#else
	OUT( VsTexCoord0 ) = IN( InTexCoord_ ) + UVWOffset_;
#endif
	VS_EXIT;
}

#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float4, VsColour0, COLOR0 );
	DECLARE_IN( float4, VsNormal, NORMAL );
	DECLARE_IN( float4, VsTexCoord0, TEXCOORD0 );
PS_IN_END
#include <PsybrusOutput.psh>

//////////////////////////////////////////////////////////////////////////
// pixelMain
#if TEXTURE_TEST_DIMENSION == 1 && PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
PSY_SAMPLER_1D( DiffuseTex );
#elif TEXTURE_TEST_DIMENSION == 2
PSY_SAMPLER_2D( DiffuseTex );
#elif TEXTURE_TEST_DIMENSION == 3 && PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
PSY_SAMPLER_3D( DiffuseTex );
#elif TEXTURE_TEST_DIMENSION == 6 && PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
PSY_SAMPLER_CUBE( DiffuseTex );
#endif

PS_MAIN( pixelMain )
{
	PS_ENTER;
	float4 Colour = float4( 1.0, 0.0, 1.0, 1.0 );
#if TEXTURE_TEST_DIMENSION == 1 && PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
	Colour = PSY_SAMPLE_1D( DiffuseTex, IN( VsTexCoord0 ).x );
#elif TEXTURE_TEST_DIMENSION == 2
	Colour = PSY_SAMPLE_2D( DiffuseTex, IN( VsTexCoord0 ).xy );
#elif TEXTURE_TEST_DIMENSION == 3 && PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
	Colour = PSY_SAMPLE_3D( DiffuseTex, IN( VsTexCoord0 ).xyz );
#elif TEXTURE_TEST_DIMENSION == 6 && PSY_OUTPUT_CODE_TYPE != PSY_CODE_TYPE_GLSL_ES_100
	Colour = PSY_SAMPLE_CUBE( DiffuseTex, IN( VsTexCoord0 ).xyz );
#endif
	writeFrag( FRAMEBUFFER_OUTPUT, Colour * IN( VsColour0 ), IN( VsNormal ).xyz );
	PS_EXIT;
}

#endif
