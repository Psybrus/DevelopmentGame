#include <Psybrus.psh>

#include <UniformPostProcessConfig.psh>

//////////////////////////////////////////////////////////////////////////
// Tone mapping.
float3 Uncharted2Curve( float3 X )
{
	const float A = 0.15;
	const float B = 0.50;
	const float C = 0.10;
	const float D = 0.20;
	const float E = 0.02;
	const float F = 0.30;
	return ( ( X * ( A * X + C * B ) + D * E ) / ( X * ( A * X + B ) + D * F ) ) - E / F;
}

float3 Uncharted2Tonemapping( float3 Colour, float Exposure )
{
	const float WhitePoint = 11.2;
	float3 WhitePoint3 = 1.0f / Uncharted2Curve( float3( WhitePoint, WhitePoint, WhitePoint ) );
	return linearToGamma( WhitePoint3 * Uncharted2Curve( Colour * Exposure ) );
}


//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float4, InPosition_, POSITION );
	DECLARE_IN( float4, InTexCoord_, TEXCOORD0 );
VS_IN_END

VS_OUT_BEGIN
	DECLARE_OUT( float4, VsTexCoord0, TEXCOORD0 );
VS_OUT_END

VS_MAIN( vertexMain )
{
	VS_ENTER;
	OUT_POSITION = IN( InPosition_ ).xyzw;
	OUT( VsTexCoord0 ) = IN( InTexCoord_ );
	VS_EXIT;
}
#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float4, VsTexCoord0, TEXCOORD0 );
PS_IN_END
#include <PsybrusOutput.psh>
PSY_SAMPLER_2D( HDRTex );

PS_MAIN( pixelMain )
{
	PS_ENTER;
	float4 Colour = PSY_SAMPLE_2D( HDRTex, IN( VsTexCoord0 ).xy );

	if( IN( VsTexCoord0 ).x < 0.5 )
	{
		Colour.xyz = Uncharted2Tonemapping( Colour.xyz, 1.0 );
	}
	else
	{
		Colour.xyz = linearToGamma( Colour.xyz );
	}

	outputFrag[0] = float4( Colour.xyz, 1.0 );
	PS_EXIT;
}

#endif

