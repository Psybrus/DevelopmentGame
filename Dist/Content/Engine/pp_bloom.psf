#include "pp_shared.psh"

#include <UniformBloom.psh>

#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float4, VsTexCoord0, TEXCOORD0 );
PS_IN_END
#include <PsybrusOutput.psh>
PSY_SAMPLER_2D( InputTexture );

//////////////////////////////////////////////////////////////////////////
// Generate
PS_MAIN( pixelMain_Generate )
{
	PS_ENTER;

	float4 Colour = PSY_SAMPLE_2D( InputTexture, IN( VsTexCoord0 ).xy );
	Colour -= float4( BloomThreshold_, BloomThreshold_, BloomThreshold_, 0.0f );
	Colour = max( Colour, float4( 0.0, 0.0, 0.0, 0.0 ) );
	float ThresholdScale = ( 1.0 / ( 1.0 - BloomThreshold_ ) );
	Colour *= ThresholdScale;
	Colour = min( Colour, float4( 1.0, 1.0, 1.0, 1.0 ) );
	float4 BloomPower4 = float4( BloomPower_, BloomPower_, BloomPower_, BloomPower_ );
	outputFrag[0] = pow( Colour, BloomPower4 );

	PS_EXIT;
}

//////////////////////////////////////////////////////////////////////////
// Blur
PS_MAIN( pixelMain_Blur )
{
	PS_ENTER;

	float Radius = BloomRadius_;
	float MaxRadius = 8.0;
	float4 Colour = float4( 0.0, 0.0, 0.0, 0.0 );
#if V_BLUR
	float Offset = 1.0 / float( textureSize( aInputTexture, 0 ).y );
	float4 UVOffset = float4( 0.0, -Radius * Offset, 0.0, 0.0 );
	float4 UVIncr = float4( 0.0, Offset, 0.0, 0.0 );
#elif H_BLUR
	float Offset = 1.0 / float( textureSize( aInputTexture, 0 ).x );
	float4 UVOffset = float4( -Radius * Offset, 0.0, 0.0, 0.0 );
	float4 UVIncr = float4( Offset, 0.0, 0.0, 0.0 );
#endif
	for( float Idx = -MaxRadius; Idx <= MaxRadius; Idx += 1.0 )
	{
		if( Idx >= -Radius && Idx <= Radius )
		{
			Colour += PSY_SAMPLE_2D( InputTexture, IN( VsTexCoord0 ).xy + UVOffset.xy );
			UVOffset += UVIncr;
		}
	}
	outputFrag[0] = float4( ( Colour / ( Radius * 2.0 + 1.0 ) ).rgb, 1.0 );

	PS_EXIT;
}

#endif // PIXEL_SHADER

