#include <Psybrus.psh>

//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float4, InPosition_, POSITION );
	DECLARE_IN( float4, InNormal_, NORMAL );
	DECLARE_IN( float4, InTexCoord_, TEXCOORD0 );
	DECLARE_IN( float4, InColour_, COLOR0 );
VS_IN_END

VS_OUT_BEGIN
	DECLARE_OUT( float4, VsColour0, COLOR0 );
	DECLARE_OUT( float4, VsNormal, NORMAL );
	DECLARE_OUT( float4, VsTexCoord0, TEXCOORD0 );
VS_OUT_END

VS_MAIN( vertexMain )
{
	VS_ENTER;
	float Offset = ( IN( InTexCoord_ ).z * IN( InTexCoord_ ).w ) * 0.5;
	float3 WorldPosition = IN( InPosition_ ).xyz;
	float3 ViewNormal = normalize( float3( mul( ViewTransform_, IN( InNormal_ ) ).xy, 0.0001 ) );
	float3 CrossZ = cross( ViewNormal, float3( 0.0, 0.0, 1.0 ) );
	float4 ViewPosition = mul( ViewTransform_, float4( WorldPosition, 1.0 ) );

	OUT_POSITION = mul( ProjectionTransform_, ViewPosition + float4( CrossZ * Offset, 0.0 ) );
	OUT( VsTexCoord0 ) = IN( InTexCoord_ );
	OUT( VsColour0 ) = IN( InColour_ );
	OUT( VsNormal ) = float4( ViewNormal, 0.0 );
	VS_EXIT;
}

#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float4, VsColour0, COLOR0 );
	DECLARE_IN( float4, VsNormal, NORMAL );
	DECLARE_IN( float4, VsTexCoord0, TEXCOORD0 );
PS_IN_END
#include <PsybrusOutput.psh>

//////////////////////////////////////////////////////////////////////////
// pixelMain
PS_MAIN( pixelMain )
{
	PS_ENTER;
	writeFrag( FRAMEBUFFER_OUTPUT, IN( VsColour0 ), IN( VsNormal.xyz ), float3( 0.0, 0.0, 0.0 ) );
	PS_EXIT;
}

#endif
