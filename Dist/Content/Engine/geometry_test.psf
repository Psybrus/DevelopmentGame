#include <Psybrus.psh>

//////////////////////////////////////////////////////////////////////////
// Vertex shader
#if VERTEX_SHADER

VS_IN_BEGIN
	DECLARE_IN( float4, InPosition_, POSITION );
	DECLARE_IN( float4, InNormal_, NORMAL );
	DECLARE_IN( float4, InTexCoord_, TEXCOORD0 );
	DECLARE_IN( float4, InColour_, COLOR0 );
#if defined( PERM_MESH_SKINNED_3D )
	DECLARE_IN( float4, InBlendWeights_, BLENDWEIGHTS );
	DECLARE_IN( BLENDINDICES_TYPE, InBlendIndices_, BLENDINDICES );
#elif defined( PERM_MESH_PARTICLE_3D )
	DECLARE_IN( float4, InTangent_, TANGENT );
#endif
VS_IN_END

//#if PSY_OUTPUT_CODE_TYPE == PSY_CODE_TYPE_GLSL_ES_100
#define VsColour0 GsColour0
#define VsNormal GsNormal
#define VsTexCoord0 GsTexCoord0
//#endif

VS_OUT_BEGIN
	DECLARE_OUT( float4, VsColour0, COLOR0 );
	DECLARE_OUT( float4, VsNormal, NORMAL );
	DECLARE_OUT( float4, VsTexCoord0, TEXCOORD0 );
VS_OUT_END

VS_MAIN( vertexMain )
{
	VS_ENTER;
 	float4 WorldPosition;
	PSY_MAKE_WORLD_SPACE_VERTEX( WorldPosition, IN( InPosition_ ) );
	PSY_MAKE_CLIP_SPACE_VERTEX( OUT_POSITION, WorldPosition );
	OUT( VsNormal ) = IN( InNormal_ );
	OUT( VsTexCoord0 ) = IN( InTexCoord_ );
	OUT( VsColour0 ) = IN( InColour_ );
	VS_EXIT;
}

#endif

//////////////////////////////////////////////////////////////////////////
// Geometry shader
#if GEOMETRY_SHADER

layout(triangles) in;
layout(triangle_strip, max_vertices = 32) out;

in VertexDataIn
{
	float4 VsColour;
	float4 VsNormal;
	float4 VsTexCoord0;
} gs_in[];

out VertexDataOut
{
	float4 GsColour0;
	float4 GsNormal;
	float4 GsTexCoord0;
} gs_out;

void geometryMain()
{
	for( float j = -4; j <= 4; j += 1.0 )
	{
		for( int i = 0; i < 3; ++i )
		{
			float4 WorldPosition = gl_in[i].gl_Position;
			//PSY_MAKE_WORLD_SPACE_VERTEX( WorldPosition, gl_in[i].gl_Position );

			WorldPosition.z += j * 10.0;

			PSY_MAKE_CLIP_SPACE_VERTEX( gl_Position, WorldPosition );

			gs_out.GsNormal = gs_in[i].VsNormal;
			gs_out.GsColour0 = gs_in[i].VsColour;
			gs_out.GsTexCoord0 = gs_in[i].VsTexCoord0;

			EmitVertex();
		}
		EndPrimitive();
	}
}

#endif

//////////////////////////////////////////////////////////////////////////
// Pixel shader
#if PIXEL_SHADER

PS_IN_BEGIN
	DECLARE_IN( float4, GsColour0, COLOR0 );
	DECLARE_IN( float4, GsNormal, NORMAL );
	DECLARE_IN( float4, GsTexCoord0, TEXCOORD0 );
PS_IN_END
#include <PsybrusOutput.psh>
//////////////////////////////////////////////////////////////////////////
// pixelMain
PS_MAIN( pixelMain )
{
	PS_ENTER;
	outputFrag[0] = IN( GsColour0 );
	PS_EXIT;
}

#endif
